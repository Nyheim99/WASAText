openapi: 3.0.0
info:
  title: WASAText
  description: |-
    This document describes the API is for the 
    WASAText application.
  version: 1.0.3


tags:
  - name: conversation
    description: A single conversation or group
  - name: conversations
    description: Conversations between users or groups
  - name: login
    description: Login on the system
  - name: message
    description: A message in a conversation or group
  - name: user
    description: A single user on the system
  - name: users
    description: Users of the system

paths:
  /session:
    post:
      tags: ["login"]
      summary: Logs in the user
      description: |-
        If the user does not exist, it will be created,
        and an identifier is returned.
        If the user exists, the user identifier is returned.
      operationId: doLogin
      requestBody:
        description: User details
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  description: Username of the user logging in or registering
                  type: string
                  example: Maria
                  pattern: "^[a-zA-Z0-9]*$"
                  minLength: 3
                  maxLength: 16
      responses:
        "201":
          description: User log-in action successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  identifier:
                    description: Id of the logged in user
                    type: integer
                    example: 1
        "400":
          description: Invalid username
        "500":
          description: Server error occurred during login.

  /users:
    get:
      tags: ["users"]
      summary: Get a list of users
      description: Return a list of all users in the system.
      operationId: getUsers
      responses:
        "200":
          description: List of users
          content:
            application/json:
              schema:
                type: array
                minItems: 1
                maxItems: 100
                items: { $ref: "#/components/schemas/User" }
        "404":
          description: No users found
        "500":
          description: Failed to fetch users

  /user:
    get:
      tags: ["user"]
      summary: get all the user's details
      description: Return the authenticated user's details.
      operationId: getUser
      responses:
        "200":
          description: User details
          content:
            application/json:
              schema: { $ref: "#/components/schemas/User" }
        "404":
          description: User not found
        "500":
          description: Internal server error

  /user/username:
    put:
      tags: ["user"]
      summary: Update the user's username
      description: |-
        Updates the user's username as long as it is not already in use
      operationId: setMyUserName
      requestBody:
        description: The new username
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  description: The new username to replace the old one
                  type: string
                  example: Marco
                  pattern: "^[a-zA-Z0-9]*$"
                  minLength: 3
                  maxLength: 16
      responses:
        "204":
          description: Username updated successfully
        "400":
          description: Invalid input
        "409":
          description: Username already in use
        "500":
          description: Internal server error

  /user/photo:
    put:
      tags: ["user"]
      summary: Upload or replace the user's profile picture
      description: Uploads a new profile picture for the user or replaces the existing one.
      operationId: setMyPhoto
      requestBody:
        description: the new profile picture
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                photo:
                  description: The profile picture to be uploaded.
                  type: string
                  format: binary
      responses:
        "200":
          description: Profile picture uploaded successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  photo_url:
                    description: The new profile picture uri reference
                    type: string
                    format: uri-reference
                    example: /service/photos/users/user_1.jpg
        "400":
          description: Invalid file upload
        "500":
          description: Internal server error

  /conversations:
    get:
      tags: ["conversations"]
      summary: Get all the user's conversations
      description: |-
        Return the list of all conversations the user is apart of
      operationId: getMyConversations
      responses:
        "200":
          description: List of conversations
          content:
            application/json:
              schema:
                type: array
                minItems: 0
                maxItems: 50
                items: { $ref: "#/components/schemas/ConversationPreview" }
                example: []
        "500":
          description: Internal server error
    post:
      tags: ["conversation"]
      summary: Create a new conversation or group
      description: |-
        Create a new private conversation with a user or a new group conversation.
      operationId: createConversation
      requestBody:
        description: Conversation details
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - conversation_type
                - message
              properties:
                conversation_type:
                  description: Type of conversation. Either "private" or "group".
                  type: string
                  enum: ["private", "group"]
                  example: group
                message:
                  description: Initial message to start the conversation
                  type: string
                  minLength: 1
                  maxLength: 1000
                  pattern: "^[a-zA-Z0-9À-ÿ.,!?()\\-\"' ]+$"
                  example: "Hey guys, whats up?"
                recipientID:
                  description: Required if `conversation_type` is "private". The user ID of the recipient.
                  type: integer
                  example: 1
                group_name:
                  description: Required if `conversation_type` is "group". The name of the group.
                  type: string
                  minLength: 3
                  maxLength: 20
                  pattern: "^[a-zA-Z0-9 ]*$"
                  example: "WASA Students"
                participants:
                  description: List of participant user IDs (excluding the creator).
                  type: array
                  minItems: 2
                  maxItems: 100
                  items:
                    type: integer
                  example: [2, 3, 4]
                group_photo:
                  description: Optional group photo to be uploaded.
                  type: string
                  format: binary
      responses:
        "201":
          description: Conversation created successfully.
        "400":
          description: Invalid request
        "500":
          description: Internal server error

  /conversations/{conversationId}:
    get:
      tags: ["conversation"]
      summary: Get conversation details
      description: |
        Retrieves metadata for a specific conversation, including its type, name, and photo.
        If the conversation is a group, the list of participants will also be included.
      operationId: getConversation
      parameters:
        - $ref: "#/components/parameters/conversationId"
      responses:
        "200":
          description: Successfully retrieved conversation details
          content:
            application/json:
              schema:
                type: object
                properties:
                  conversation_id:
                    description: Unique identifier of the conversation
                    type: integer
                    example: 2
                  conversation_type:
                    description: Type of conversation. Either "private" or "group".
                    type: string
                    enum: ["private", "group"]
                    example: group
                  display_name:
                    description: Name of the group or the other participant (for private chats)
                    type: string
                    minLength: 3
                    maxLength: 20
                    pattern: "^[a-zA-Z0-9 ]*$"
                    example: "WASA Chat"
                  display_photo_url:
                    description: Uri reference of the conversation photo
                    type: string
                    format: uri-reference
                    example: "/service/photos/groups/group_2.jpg"
                  messages:
                    description: List of messages in conversation
                    type: array
                    minItems: 1
                    maxItems: 1000
                    items: { $ref: "#/components/schemas/Message" }
                  participants:
                    description: List of participants (only for group conversations)
                    type: array
                    minItems: 2
                    maxItems: 100
                    items: { $ref: "#/components/schemas/User" }
        "400":
          description: Invalid conversation ID
        "404":
          description: Conversation not found
        "500":
          description: Internal server error

  /conversations/{conversationId}/name:
    put:
      tags: ["conversation"]
      summary: Update the group conversation name
      description: |-
        Updates the name of a group conversation.
      operationId: setGroupName
      parameters:
        - $ref: "#/components/parameters/conversationId"
      requestBody:
        description: New group name
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  description: The new group name to replace the old one
                  type: string
                  example: "Study Group"
                  pattern: "^[a-zA-Z0-9 ]*$"
                  minLength: 3
                  maxLength: 20
      responses:
        "200":
          description: Group name updated successfully
          content:
            application/json:
              schema:
                description: The new group name to replace the old one
                type: string
                example: "Study Group"
                pattern: "^[a-zA-Z0-9 ]*$"
                minLength: 3
                maxLength: 20
        "400":
          description: Invalid request
        "500":
          description: Internal server error

  /conversations/{conversationId}/photo:
    put:
      tags: ["conversation"]
      summary: Upload or update a group's profile picture
      description: |-
        Uploads a new profile picture for a group conversation 
        or replaces the existing one.
      operationId: setGroupPhoto
      parameters:
        - $ref: "#/components/parameters/conversationId"
      requestBody:
        description: New group picture
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                photo:
                  description: The group photo to be uploaded
                  type: string
                  format: binary
      responses:
        "200":
          description: Group photo uploaded successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  photo_url:
                    description: Uri reference of the new conversation photo
                    type: string
                    format: uri-reference
                    example: /service/photos/users/user_1.jpg
        "400":
          description: Invalid request
        "500":
          description: Internal server error

  /conversations/{conversationId}/members:
    post:
      tags: ["conversation"]
      summary: Add users to a group conversation
      description: |
        Adds new participants to an existing group conversation.
        The request must be sent by an existing member of the group.
      operationId: addToGroup
      parameters:
        - $ref: "#/components/parameters/conversationId"
      requestBody:
        description: List of new group members
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                participants:
                  description: List of user IDs that are new members
                  type: array
                  minItems: 1
                  maxItems: 100
                  items:
                    description: ID of the user to be added
                    type: integer
                  example: [3, 4, 5]
      responses:
        "204":
          description: Successfully added users to the group conversation
        "400":
          description: Invalid request
        "403":
          description: User is not a member of the conversation
        "404":
          description: Conversation not found
        "500":
          description: Internal server error
  
  /conversations/{conversationId}/members/me:
    delete:
      tags: ["conversation"]
      summary: Leave a group conversation
      description: |
        Allows a user to leave a group conversation. 
        If the group has only one participant remaining after this action, 
        the group will be automatically deleted.
      operationId: leaveGroup
      parameters:
        - $ref: "#/components/parameters/conversationId"
      responses:
        "204":
          description: Successfully left the group conversation
        "400":
          description: Invalid request
        "403":
          description: User is not a member of the conversation
        "404":
          description: Conversation not found
        "500":
          description: Internal server error

  /conversations/{conversationId}/messages:
    post:
      tags: ["message"]
      summary: Send a message in a conversation
      description: |
        Sends a message (either text or photo) in the specified conversation.
        Users can send a plain text message or a photo.
      operationId: sendMessage
      parameters:
        - $ref: "#/components/parameters/conversationId"
      requestBody:
        description: Message to be sent
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                message:
                  description: The text content of the message
                  type: string
                  minLength: 1
                  maxLength: 1000
                  pattern: "^[a-zA-Z0-9À-ÿ.,!?()\\-\"' ]+$"
                  example: "Hello everyone!"
                photo:
                  description: The image to be stored in the database
                  type: string
                  format: binary
      responses:
        "201":
          description: Message sent successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message_id:
                    description: Unique identifier of the sent message
                    type: integer
                    example: 123
                  message_type:
                    description: Type of message sent. Either "text" or "photo"
                    type: string
                    enum: ["text", "photo"]
                    example: text
                  content:
                    description: The text content of the message (empty if it's a photo message)
                    type: string
                    minLength: 0
                    maxLength: 1000
                    pattern: "^[a-zA-Z0-9À-ÿ.,!?()\\-\"' ]+$"
                    example: "Hello everyone!"
                  sender_id:
                    description: ID of the user who sent the message
                    type: integer
                    example: 2
                  sender_name:
                    description: Name of the user who sent the message
                    type: string
                    pattern: "^[a-zA-Z0-9]*$"
                    minLength: 3
                    maxLength: 16
                    example: "JohnDoe"
                  timestamp:
                    description: Time when the message was sent
                    type: string
                    format: date-time
                    example: "2024-02-02T15:04:05Z"
        "400":
          description: Invalid request
        "404":
          description: Sender not found
        "500":
          description: Internal server error

  /conversations/{conversationId}/messages/{messageId}:
    delete:
      tags: ["message"]
      summary: Soft delete a message in a conversation
      description: |
        Marks a message as deleted by setting `is_deleted = true` instead of permanently removing it.
        Only the sender of the message can delete it.
      operationId: deleteMessage
      parameters:
        - $ref: "#/components/parameters/conversationId"
        - $ref: "#/components/parameters/messageId"
      responses:
        "200":
          description: Message deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message_id:
                    description: Unique identifier of the deleted message
                    type: integer
                    example: 45
                  conversation_id:
                    description: Unique identifier of the conversation
                    type: integer
                    example: 12
                  status:
                    description: Confirmation message
                    type: string
                    enum: ["sent", "read"]
                    example: sent
        "400":
          description: Invalid request parameters.
        "401":
          description: Unauthorized - User is not authenticated.
        "403":
          description: Forbidden - User is not the sender of this message.
        "404":
          description: Message not found or already deleted.
        "500":
          description: Internal server error.
  /conversations/{conversationId}/messages/{messageId}/reactions:
    post:
      tags: ["message"]
      summary: Add a reaction to a message
      description: |
        Adds a reaction (emoticon) to a specific message in a conversation. 
        The reaction must be one of the predefined emoticons.
      operationId: addReaction
      parameters:
        - $ref: "#/components/parameters/conversationId"
        - $ref: "#/components/parameters/messageId"
      requestBody:
        description: Reaction details
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - emoticon
              properties:
                emoticon:
                  description: The emoticon representing the reaction. Must be one of ["👍", "😂", "❤️", "🔥", "😢"].
                  type: string
                  enum: ["👍", "😂", "❤️", "🔥", "😢"]
                  example: "😂"
      responses:
        "204":
          description: Reaction added successfully
        "400":
          description: Bad request - Invalid message ID or missing/invalid emoticon
        "403":
          description: Unauthorized - User is not a participant in the conversation
        "404":
          description: Message not found
        "500":
          description: Internal server error
  /conversations/{conversationId}/messages/{messageId}/reactions/me:
    delete:
      tags: ["message"]
      summary: Remove your reaction from a message
      description: |
        Removes the current user's reaction (if it exists) from a specific message in the conversation.
      operationId: removeReaction
      parameters:
        - $ref: "#/components/parameters/conversationId"
        - $ref: "#/components/parameters/messageId"
      responses:
        "204":
          description: Reaction removed successfully
        "400":
          description: Bad request - Invalid message ID
        "403":
          description: Unauthorized - User is not a participant in the conversation or does not have a reaction on this message
        "404":
          description: Message or reaction not found
        "500":
          description: Internal server error

components:
  schemas:
    User:
      title: User
      description: "This object represents a single User"
      type: object
      properties:
        id:
          description: "Unique user identifier"
          type: integer
          example: 1
        username:
          description: "The user's username"
          type: string
          example: Maria
          pattern: "^[a-zA-Z0-9]*$"
          minLength: 3
          maxLength: 16
        photo_url:
          description: Uri reference of user's profile picture
          type: string
          format: uri-reference
          example: /service/photos/users/user_1.jpg
    Message:
      title: Message
      description: This object represents a single message
      type: object
      properties:
        id:
          description: Unique message identifier
          type: integer
          example: 1
        sender_id:
          description: Unique identifier of the user who sent the message
          type: integer
          example: 1
        sender_username:
          description: Name of user who sent the message
          type: string
          example: Maria
          pattern: "^[a-zA-Z0-9]*$"
          minLength: 3
          maxLength: 16
        content:
          description: Content of the message
          type: string
          minLength: 1
          maxLength: 1000
          pattern: "^[a-zA-Z0-9À-ÿ.,!?()\\-\"' ]+$"
          example: "Hello guys!"
        conversation_id:
          description: Unique identifier of the conversation
          type: integer
          example: 1
        timestamp:
          description: Timestamp of when the message was sent
          type: string
          format: date-time
          example: "2024-02-02T15:04:05Z"
        status:
          description: Status of the message
          type: string
          enum: ["sent", "read"]
          example: sent
        is_deleted:
          description: |-
            Indicates whether a message is deleted (true9 or not (false)
          type: boolean
          example: false
          default: false
        is_forwarded:
          description: |-
            Indicates whether a message is forwarded (true) or not (false)
          type: boolean
          example: true
          default: false
        is_reply:
          description: |-
            Indicates whether the message is a reply to another message (true) 
            or standalone (false).
          type: boolean
          example: true
          default: false
        original_message_id:
          description: |-
            The unique identifier of the original message this message is replying to. 
            If the message is standalone this will be 0.
          type: integer
          example: 0
        reactions:
          description: A list of reactions to the message
          type: array
          minItems: 0
          maxItems: 100
          items: { $ref: "#/components/schemas/Reaction" }
    Reaction:
      title: Reaction
      description: Represents a single reaction to a message
      type: object
      properties:
        emoticon:
          description: The emoticon used in the reaction
          type: string
          example: 👍
          enum: ["👍", "😂", "❤️", "🔥", "😢"]
        user_id:
          description: Unique identifier of the user who reacted
          type: integer
          example: 2
        message_id:
          description: Unique identifier of the message
          type: integer
          example: 1
    ConversationPreview:
      title: ConversationPreview
      description: This object represents a preview of a conversation for listing
      type: object
      properties:
        conversation_id:
          description: Unique identifier of the conversation
          type: integer
          example: 1
        conversation_type:
          description: Type of conversation. Either "private" or "group".
          type: string
          enum: ["private", "group"]
          example: group
        display_name:
          description: The name displayed for the conversation (group name or other user's name)
          type: string
          minLength: 3
          maxLength: 20
          pattern: "^[a-zA-Z0-9 ]*$"
          example: "WASA Students"
        display_photo_url:
          description: Uri reference of the display photo for the conversation (group photo or other user's profile picture)
          type: string
          format: uri-reference
          example: /service/photos/groups/group_2.jpg
        last_message_id:
          description: ID of last message in the conversation
          type: integer
          example: 789
        last_message_content:
          description: Content of the last message in the conversation
          type: string
          nullable: true
          minLength: 1
          maxLength: 1000
          example: "Hey, how are you?"
        last_message_has_photo:
          description: Indicates if the last message contains a photo
          type: boolean
          example: true
        last_message_timestamp:
          description: Timestamp of the last message
          type: string
          format: date-time
          example: "2024-02-05T12:00:00Z"
        last_message_sender_id:
          description: ID of the user who sent the last message
          type: integer
          example: 2
        last_message_sender:
          description: Username of the last message sender
          type: string
          minLength: 3
          maxLength: 16
          pattern: "^[a-zA-Z0-9]*$"
          example: Alice
        last_message_is_deleted:
          description: Indicates if the last message was deleted
          type: boolean
          example: false

  parameters:
    conversationId:
      description: Conversation Id
      schema:
        type: integer
        example: 1
      name: conversationId
      in: path
      required: true
    messageId:
      description: Message Id
      schema:
        type: integer
        example: 1
      name: messageId
      in: path
      required: true
