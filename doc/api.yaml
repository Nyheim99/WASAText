openapi: 3.0.0
info:
  title: WASAText
  description: |-
    This document describes the API is for the 
    WASAText application.
  version: 1.0.3
paths:
  /session:
    post:
      tags: ["login"]
      summary: Logs in the user
      description: |-
        If the user does not exist, it will be created,
        and an identifier is returned.
        If the user exists, the user identifier is returned.
      operationId: doLogin
      requestBody:
        description: User details
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: Maria
                  pattern: "^[a-zA-Z0-9]*$"
                  minLength: 3
                  maxLength: 16
        required: true
      responses:
        "201":
          description: User log-in action successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  identifier:
                    type: integer
                    example: 1
        "400":
          description: Invalid username
        "500":
          description: Server error occurred during login.
  /users:
    get:
      tags: ["users"]
      summary: Get a list of users
      description: |-
        Return a list of all users in the system.
      operationId: getUsers
      responses:
        "200":
          description: List of users
          content:
            application/json:
              schema:
                type: array
                items: { $ref: "#/components/schemas/User" }
        "500":
          description: "Internal server error. Please try again later."

  /user:
    get:
      tags: ["user"]
      summary: get all the user's details
      description: |-
        Return the authenticated user's details.
      operationId: getUser
      responses:
        "200":
          description: User details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "401":
          description: "Unauthorized"
        "404":
          description: "User not found"
        "500":
          description: "Internal server error. Please try again later."

  /user/username:
    put:
      tags: ["user"]
      summary: Update the user's username
      description: |-
        Updates the user's username as long as it is not already in use
      operationId: setMyUserName
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  minLength: 3
                  maxLength: 16
                  pattern: "^[a-zA-Z0-9]*$"
                  example: Marco
              required:
                - username
      responses:
        "200":
          description: Username updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  username:
                    type: string
        "400":
          description: Invalid input.
        "404":
          description: User not found.
        "409":
          description: Username already in use.
        "500":
          description: "Internal server error. Please try again later."

  /user/photo:
    put:
      tags: ["user"]
      summary: Upload or replace the user's profile picture
      description: Uploads a new profile picture for the user or replaces the existing one.
      operationId: setMyPhoto
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                photo:
                  type: string
                  format: binary
                  description: The profile picture to be uploaded.
      responses:
        "200":
          description: Profile picture uploaded successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Profile picture uploaded successfully
                  photo_url:
                    type: string
                    example: /service/profile_pictures/user_1.jpg
        "400":
          description: Invalid file upload
        "500":
          description: Server error occurred

  /conversations:
    get:
      tags: ["conversations"]
      summary: Get all the user's conversations
      description: |-
        Return the list of all conversations the user is apart of
      operationId: getMyConversations
      responses:
        "200":
          description: List of conversations
          content:
            application/json:
              schema:
                type: array
                items: { $ref: "#/components/schemas/Conversation" }
        "401":
          description: "Unauthorized"
        "500":
          description: "Internal server error. Please try again later."
    post:
      tags: ["conversation"]
      summary: Create a new conversation or group
      description: |-
        Create a new conversation with someone or a new group
      operationId: createConversation
      requestBody:
        content:
          application/json:
            schema: { $ref: "#/components/schemas/Conversation" }
      responses:
        "201":
          description: Conversation created successfully
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Conversation" }
        "500":
          description: "Internal server error. Please try again later."

  /conversations/{conversationId}:
    get:
      tags: ["conversation"]
      operationId: getConversation
      summary: Get conversation details
      description: |
        Retrieves metadata for a specific conversation, including its type, name, and photo.
        If the conversation is a group, the list of participants will also be included.
      parameters:
        - $ref: "#/components/parameters/conversationId"
      responses:
        "200":
          description: Successfully retrieved conversation details
          content:
            application/json:
              schema:
                type: object
                properties:
                  conversation_id:
                    type: integer
                    description: Unique conversation identifier
                    example: 2
                  conversation_type:
                    type: string
                    description: Type of the conversation
                    enum: ["group", "private"]
                    example: "group"
                  display_name:
                    type: string
                    description: Name of the group or the other participant (for private chats)
                    example: "WASAChat"
                  display_photo_url:
                    type: string
                    description: URL of the conversation photo
                    example: "/service/photos/groups/group_2.jpg"
                  participants:
                    type: array
                    description: List of participants (only for group conversations)
                    items:
                      $ref: "#/components/schemas/User"
        "400":
          description: Invalid conversation ID
        "404":
          description: Conversation not found
        "500":
          description: Internal server error

  /conversations/{conversationId}/photo:
    put:
      tags: ["conversation"]
      summary: Upload or update a group's profile picture
      description: |-
        Uploads a new profile picture for a group conversation or replaces the existing one.
      operationId: setGroupPhoto
      parameters:
        - $ref: "#/components/parameters/conversationId"
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                photo:
                  type: string
                  format: binary
                  description: The group photo to be uploaded.
      responses:
        "200":
          description: Group photo uploaded successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Group photo uploaded successfully
                  photo_url:
                    type: string
                    example: /service/photos/groups/group_1.jpg
        "400":
          description: Invalid file upload
        "404":
          description: Group conversation not found.
        "500":
          description: Server error occurred

  /conversations/{conversationId}/name:
    put:
      tags: ["conversation"]
      summary: Update the group conversation name
      description: |-
        Updates the name of a group conversation.
      operationId: setGroupName
      parameters:
        - $ref: "#/components/parameters/conversationId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  minLength: 3
                  maxLength: 20
                  example: "Study Group"
      responses:
        "200":
          description: Group name updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Group name updated successfully
                  name:
                    type: string
                    example: "Study Group"
        "400":
          description: Invalid input.
        "404":
          description: Group conversation not found.
        "500":
          description: "Internal server error. Please try again later."

  /conversations/{conversationId}/members:
    post:
      tags: ["conversation"]
      summary: Add users to a group conversation
      description: |
        Adds new participants to an existing group conversation.
        The request must be sent by an existing member of the group.
      operationId: addToGroup
      parameters:
        - $ref: "#/components/parameters/conversationId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                participants:
                  type: array
                  items:
                    type: integer
                    description: ID of the user to be added
                  example: [3, 4, 5]
      responses:
        "200":
          description: Successfully added users to the group conversation.
          content:
            application/json:
              schema:
                type: object
                properties:
                  conversation_id:
                    type: integer
                    description: Unique identifier of the conversation
                    example: 1
                  added_users:
                    type: array
                    items:
                      type: integer
                      description: ID of users that were added
                    example: [3, 4, 5]
        "400":
          description: |
            - Invalid conversation ID
            - No participants provided
            - Conversation is not a group
        "403":
          description: User is not a member of the conversation
        "404":
          description: Conversation not found
        "500":
          description: Internal server error
  /conversations/{conversationId}/members/me:
    delete:
      tags: ["conversation"]
      summary: Leave a group conversation
      description: |
        Allows a user to leave a group conversation. 
        If the group has only one participant remaining after this action, the group will be automatically deleted.
      operationId: leaveGroup
      parameters:
        - $ref: "#/components/parameters/conversationId"
      responses:
        "200":
          description: Successfully left the group conversation.
          content:
            application/json:
              schema:
                type: object
                properties:
                  conversation_id:
                    type: integer
                    description: Unique identifier of the conversation
                    example: 10
                  status:
                    type: string
                    description: Confirmation message
                    example: "User successfully left the group"
        "400":
          description: |
            - Invalid conversation ID
            - Conversation is not a group
        "403":
          description: User is not a member of this group
        "404":
          description: Conversation not found
        "500":
          description: Internal server error

  /conversations/{conversationId}/messages:
    post:
      tags: ["message"]
      summary: Send a message in a conversation
      description: |
        Sends a message (either text or photo) in the specified conversation.
        Users can send a plain text message, a photo, or both.
      operationId: sendMessage
      parameters:
        - $ref: "#/components/parameters/conversationId"
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                message:
                  type: string
                  description: The text content of the message
                  example: "Hello everyone!"
                photo:
                  type: string
                  format: binary
                  description: The image file to be uploaded
      responses:
        "201":
          description: Message sent successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message_id:
                    type: integer
                    description: Unique identifier of the sent message
                    example: 123
                  message_type:
                    type: string
                    enum: ["text", "photo"]
                    description: Type of message sent
                    example: "text"
                  content:
                    type: string
                    description: The text content of the message (empty if it's a photo message)
                    example: "Hello everyone!"
                  sender_id:
                    type: integer
                    description: ID of the user who sent the message
                    example: 2
                  sender_name:
                    type: string
                    description: Name of the user who sent the message
                    example: "JohnDoe"
                  timestamp:
                    type: string
                    format: date-time
                    description: Time when the message was sent
                    example: "2024-02-02T15:04:05Z"
        "400":
          description: Bad request - Either no content provided, invalid file type, or malformed request.
        "401":
          description: Unauthorized - User is not authenticated.
        "404":
          description: Conversation not found.
        "500":
          description: Internal server error.

  /conversations/{conversationId}/messages/{messageId}:
    delete:
      tags: ["message"]
      summary: Soft delete a message in a conversation
      description: |
        Marks a message as deleted by setting `is_deleted = true` instead of permanently removing it.
        Only the sender of the message can delete it.
      operationId: deleteMessage
      parameters:
        - $ref: "#/components/parameters/conversationId"
        - $ref: "#/components/parameters/messageId"
      responses:
        "200":
          description: Message deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message_id:
                    type: integer
                    description: Unique identifier of the deleted message
                    example: 45
                  conversation_id:
                    type: integer
                    description: Unique identifier of the conversation
                    example: 12
                  status:
                    type: string
                    description: Confirmation message
                    example: "deleted"
        "400":
          description: Invalid request parameters.
        "401":
          description: Unauthorized - User is not authenticated.
        "403":
          description: Forbidden - User is not the sender of this message.
        "404":
          description: Message not found or already deleted.
        "500":
          description: Internal server error.

components:
  schemas:
    User:
      title: User
      description: "This object represents a single User"
      type: object
      properties:
        id:
          description: "Unique user identifier"
          type: integer
          example: 1
        username:
          type: string
          description: "The user's username"
          example: Maria
          pattern: "^[a-zA-Z0-9]*$"
          minLength: 3
          maxLength: 16
        photo_url:
          description: "URL of user's profile picture"
          type: string
          example: "https://url.com/photo.jpg"
    Message:
      title: Message
      description: "This object represents a single message"
      type: object
      properties:
        id:
          description: Unique message identifier
          type: integer
          example: 1
          readOnly: true
        user_id:
          description: "Id of user who sent the message"
          type: integer
          example: 1
        content:
          description: "Content of the message"
          type: string
          example: "Hello guys!"
        timestamp:
          description: "Timestamp of when the message was sent"
          type: string
          format: date-time
        status:
          description: "Status of the message"
          type: string
          enum: ["sent", "read"]
          example: "sent"
        is_reply:
          description: |-
            Indicates whether the message is a reply to another message (true) 
            or standalone (false).
          type: boolean
          example: true
          default: false
        original_message_id:
          description: |-
            The unique identifier of the original message this message is replying to. 
            If the message is standalone, this will be null or omitted.
          type: integer
          nullable: true
          example: 42
        is_forwarded:
          description: |-
            Indicates whether a message is forwarded (true) or not (false)
          type: boolean
          example: true
          default: false
        comments:
          description: "A list of comments to the message"
          type: array
          items:
            $ref: "#/components/schemas/Comment"
    Comment:
      title: Comment
      description: "Represents a single comment to a message"
      type: object
      properties:
        emoticon:
          description: "The emoticon used in the comment"
          type: string
          example: "😃"
        user_id:
          description: "ID of the user who commented"
          type: integer
          example: 2
    Conversation:
      title: Conversation
      description: "This object represents a conversation between two users"
      type: object
      properties:
        conversation_id:
          description: "Unique conversation identifier"
          type: integer
          example: 1
        name:
          description: "Name of the group"
          type: string
          example: "WASA Co-Students"
          maxLength: 20
        conversation_type:
          description: |-
            Indicates wether conversation is a group or private conversation
          type: string
          enum: ["group", "private"]
          example: "group"
        last_message_id:
          description: "Id of last message in conversation"
          type: integer
          example: 789
        photo_url:
          description: "Url of the group's picture"
          type: string
          example: "https://url.com/photo.jpg"

  parameters:
    userId:
      schema:
        type: integer
        example: 1
      name: userId
      in: path
      required: true
      description: "User Id"
    conversationId:
      schema:
        type: integer
        example: 1
      name: conversationId
      in: path
      required: true
      description: "Conversation Id"
    messageId:
      schema:
        type: integer
        example: 1
      name: messageId
      in: path
      required: true
      description: "Message Id"
